: Start from a known module state, the default
module_restore

: Load modules
#module unload PrgEnv-cray/8.5.0
#module unload nvhpc/24.1

ml >&2
if [ -z ${MYGCC+x} ]; then module load gcc ; else module load $MYGCC ; fi
#######
ml 2>&1 | grep gcc-native/12.1 ; if [ $? -eq 0 ]  ; then echo REPLACING gcc-native/12.1 ; ml gcc-stdalone/13.1.0 ; fi
#######
ml >&2

ml PrgEnv-nvhpc
ml cray-libsci/23.05.1.4
ml binutils
: << ++++ 
 Compile our program.
 
 Here we use CC. If we were compiling Fortran
 then ftn instead of CC.  These are wrappers
 that point to Cray MPI and with PrgEnv-nvhpc
 we get Nvidia's back end compilers.  
++++

CC -gpu=cc90   ping_pong_cuda_staged.cu -o staged


: We run with 2 tasks total. One 1 and two nodes
echo running staged on node
srun  --nodes=1 --tasks-per-node=2 ./staged

echo running staged off node
srun  --nodes=2 --tasks-per-node=1 ./staged

echo running multi-gpu stream
CC -gpu=cc90  -DNTIMES=1000  mstream.cu -o mstream
export VSIZE=3300000000
export VSIZE=330000000
srun --tasks-per-node=4  ./mstream -n $VSIZE


